<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="timer1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="tbMain.Text" xml:space="preserve">
    <value># it's a comment
# copy paste from excel here
# or write natively \t is separator
name 1	320	blf
name 2	321	blf
name 3	322	sd
name 4	323	blf
name 5	324	blf
name 6	325	blf
name 7	326	blf
name 8	327	sd
name 9	328	blf
name 10	329	blf
name 11	330	blf
name 12	331	blf
name 13	332	blf
name 14	333	blf
name 15	334	blf
name 16	335	sd
name 17	336	blf
name 18	337	blf
name 19	338	blf
name 20	339	blf
name 21	340	blf
name 22	341	blf
name 23	342	blf
name 24	343	blf
name 25	344	blf
name 26	345	blf
name 27	346	blf
name 28	347	blf
name 29	348	blf
name 30	349	blf
name 31	350	sd
name 32	351	blf
name 33	352	blf
name 34	353	blf
name 35	354	blf
name 36	355	blf
name 37	356	blf
name 38	357	blf
name 39	358	blf
name 40	359	blf</value>
  </data>
  <metadata name="timer2.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>104, 17</value>
  </metadata>
  <data name="tbBrowserSorce.Text" xml:space="preserve">
    <value>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
	&lt;title&gt;gxv3240_mpk hello page&lt;/title&gt;
&lt;/head&gt;
&lt;body style="font-family: Geneva, Arial, Helvetica, sans-serif;"&gt;
		&lt;h1&gt;gxv3240_mpk&lt;/h1&gt;
		&lt;p&gt;
			&lt;strong&gt;gxv3240_mpk&lt;/strong&gt; it's amateur project. it's created to simplify the routine work to a grandstream gxv 3240.
		&lt;/p&gt;
		&lt;p&gt;
			this program is very simply to use:
		&lt;/p&gt;
		&lt;ol&gt;
			&lt;li&gt;
				create a table in table editor (like microsoft excel) and copy past to text box
			&lt;/li&gt;
			&lt;li&gt;
				write device ip and press &lt;em&gt;Go&lt;/em&gt; button (this action will close this page press &lt;a href="https://github.com/riv-gh/gxv3240_mpk/wiki/" target="_blank"&gt;link&lt;/a&gt; to open in browser)
			&lt;/li&gt;
			&lt;li&gt;
				login to device with built-in browser or use &lt;em&gt;Login&lt;/em&gt; button (in text boxes default login). &lt;em&gt;password char '1' is tribute for one stupid emploee&lt;/em&gt;
			&lt;/li&gt;
			&lt;li&gt;
				navigate to MPK EXT settings (&lt;em&gt;Advanced Settings&lt;/em&gt; → &lt;em&gt;MPK EXT1 Settings&lt;/em&gt; [or 2-4]) in built-in browser
			&lt;/li&gt;
			&lt;li&gt;
				press &lt;em&gt;WriteMKP&lt;/em&gt; to add mpks to panel
			&lt;/li&gt;
			&lt;li&gt;
				enjoy
			&lt;/li&gt;
		&lt;/ol&gt;
		&lt;p&gt;
			thanks for using!
		&lt;/p&gt;
		&lt;p&gt;
			watch on &lt;a href="https://github.com/riv-gh/gxv3240_mpk" target="_blank"&gt;github&lt;/a&gt;
		&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</value>
  </data>
  <metadata name="timer3.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>191, 17</value>
  </metadata>
</root>